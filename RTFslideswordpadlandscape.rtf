{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Georgia;}{\f1\fnil\fcharset0 Courier New;}}
{\colortbl ;\red0\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red0\green176\blue80;}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\f0\fs28\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par
\par
\par
\par
\fs56 The Power of Ignorance \super (*)\nosupersub\par
\fs28\par
\fs40 Gerhard Paseman, Sheperd Systems\par
\fs24 LinkedIn Performance Engineering Meetup\par
Nov. 12, 2019, Sunnyvale, CA\par
\par
 Version 20191110 (Wordpad:  landscape, 1" margins, letter size. Use print preview.) \par
\par
\fs28\par
\par
github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par

\pard\sa200\sl276\slmult1\fs56 The Problem:\par
\fs40\tab Speed up an unknown application (metabat2)\par
\tab on brand new hardware  \par
\tab\tab (Ascent cluster of nodes with GPU arrays )\par
\tab with a foreign development environment\par
\tab\tab (C++, Cmake, Boost, CUDA, OpenACC, etc.)  ...\par
\par
\tab ... in 4 1/2 days. \super (**)\nosupersub\fs24\lang9  {\fs28{\field{\*\fldinst{HYPERLINK https://www.olcf.ornl.gov/for-users/training/gpu-hackathons/ }}{\fldrslt{https://www.olcf.ornl.gov/for-users/training/gpu-hackathons/\ul0\cf0}}}}\f0\fs40\lang1033\par
\super\par
\par
\nosupersub Step 0: Find someone to help login, upload and build, and run tests.\par

\pard\sa200\sl276\slmult1\qc\fs28 github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par
\fs56 You Know What To Do Next:\par
\par
\par
\fs72 Profile.\fs56\par
\par
\par
No Excuses.\fs40\par

\pard\sa200\sl276\slmult1\par

\pard\sa200\sl276\slmult1\qc\fs28\par
github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par
\fs56\lang9 Chase your dreams\par
\fs40\par

\pard\sa200\sl276\slmult1 What if you had enough preprocessing resources (memory, libraries) to solve the problem?\par
\par
What if you don't know enough about the computational issues (numerical convergence, parallel race conditions) to ensure good code?\par
\par
What if you don't need to know enough to solve the problem anyway?\par
\par
Next: cal_tnf_dist is using 231 out of 290 seconds wall time (\cf2 77%\cf0 ).\par

\pard\sa200\sl276\slmult1\qc\fs28\lang1033 github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par
\fs56\lang9 Based on a true story\super (***)\nosupersub : BEFORE\par

\pard\sa200\sl276\slmult1\f1\fs40\par
\fs36 double cal_tnf_dist(arrayindex i,j) \{\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab // ...\par
\tab A = log(tnfval[i]);\par
\tab B = log(tnfval[j]);\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab // ...\par
\tab TMP = polynomial(A,B);\par
\tab if (gexp(TMP) > 0.1) \{ \tab\tab // simplified version \par
\tab\tab TMP = poly2(A,B);\par
\tab\tab return gexp(TMP); \}\par
\tab else return 0.1 ;  \tab\tab\tab // ...\par

\pard\sa200\sl276\slmult1\qc\f0\fs28\lang1033 github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par
\fs56\lang9 Based on a true story\super (***)\nosupersub : BEFORE\par

\pard\sa200\sl276\slmult1\f1\fs36\par
// pseudocode version\par
for ( i in BIG )\par
\tab for ( j in BIGGER ) \{\par
\tab\tab val = cal_tnf_dist(i,j);\par
\tab\tab if (val > 0.1) \{\par
\tab\tab\tab do_stuff(val, ... ); // and ...\par

\pard\sa200\sl276\slmult1\qc\f0\par

\pard\sa200\sl276\slmult1\fs40 BIG is some number like 2000. BIGGER is bigger than BIG.  Say BIGGER is like 20000.\par
(***) {{\field{\*\fldinst{HYPERLINK https://bitbucket.org/berkeleylab/metabat/src }}{\fldrslt{https://bitbucket.org/berkeleylab/metabat/src\ul0\cf0}}}}\f0\fs40  (metabat2.cpp)\par

\pard\sa200\sl276\slmult1\qc\fs28\lang1033 github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par
\fs56\lang9 A potential solution\par

\pard\sa200\sl276\slmult1\fs40\par
There is repeated redundant AND expensive computation. Let's move it out of the routine.\par
log can be precomputed.  Also, value from gexp is not needed in all cases, just when the test before \f1 do_stuff\f0  succeeds.\par
\par
Below, \f1 GEXPINV0.1 \f0 is precomputed, along with \f1 log(tnfval[])\f0 ;\par
We are using Rule 2 trade-space-for-time in moving log out, and Rule 4 lazy evaluation in moving gexp out.\super (****) (Jon Bentley, Writing Efficient Programs)\par
\nosupersub NOT SHOWN: scaffolding to test that transform works computationally as well as mathematically.\par

\pard\sa200\sl276\slmult1\qc\fs28\lang1033 github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par
\fs56\lang9 Based on a true story\super (***)\nosupersub : AFTER\par

\pard\sa200\sl276\slmult1\highlight3\f1\fs40 for (k in BIGGER) logtval[k] = log(tnfval[k]);\highlight0\par
\fs20\par
\fs40 double \highlight3 new\highlight0 _cal_tnf_dist(arrayindex i,j) \{\par
\tab A = \highlight3 logtval[i]\highlight0 ;\par
\tab B = \highlight3 logtval[j]\highlight0 ;\par
\fs36\tab TMP = polynomial(A,B);\par
\fs40\tab if (\highlight3 TMP > GEXPINV0.1\highlight0 ) \{\par
\fs36\tab\tab TMP = poly2(A,B);\par
\fs40\tab\tab return \highlight3 TMP\highlight0 ; \}\par
\tab else return \highlight3 GEXPINV0.1\highlight0 ; // ...\par

\pard\sa200\sl276\slmult1\qc\f0\fs28\lang1033\par
github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par
\fs56\lang9 Based on a true story\super (***)\nosupersub : AFTER\par

\pard\sa200\sl276\slmult1\f1\fs36\par
// pseudocode\par
for ( i in BIG )\par
\tab for ( j in BIGGER ) \{\par
\tab\tab\highlight3 newval\highlight0  = \highlight3 new\highlight0 _cal_tnf_dist(i,j);\par
\tab\tab if (\highlight3 newval > GEXPINV0.1\highlight0 ) \{\par
\tab\tab\tab do_stuff(\highlight3 gexp(newval)\highlight0 , ... ) ;\par

\pard\sa200\sl276\slmult1\qc\f0\fs56\par
\fs28\lang1033\par
\par
\par
github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par
\fs56\lang9 Some analysis\par
\par

\pard\sa200\sl276\slmult1\fs40 We can easily count function calls to give a rough estimate of savings.\par
Big-Oh asymptotics are left as an exercise.\par
\par
Call Count \tab Before\tab\tab\tab\tab\tab\tab After\par
\f1\fs36 log\f0\fs40\tab\tab\tab about \f1\fs36 BIG*BIGGER\f0\fs40\tab\tab\tab at most \f1\fs36 BIGGER\f0\fs40\par
\f1\fs36 exp\f0\fs40\tab\tab\tab about \f1\fs36 BIG*BIGGER\f0\fs40\tab\tab\tab about \f1\fs36 BIG*\f0\fs40 log(\f1\fs36 BIGGER\f0\fs40 ) ##\par
\par
## actual count depends on input, but is expected 95% of the time\par

\pard\sa200\sl276\slmult1\qc\fs28\lang1033 github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par
\fs56\lang9 Some numbers\par
\par

\pard\sa200\sl276\slmult1\fs40 Proper numbers come from extensive testing and measuring.  These come from available data instead:\par

\pard\li720\sa200\sl276\slmult1 Rerunning the test case reduced time for \f1\fs36 cal_tnf_dist\f0\fs40  by \cf4 87%\cf0 . Total wall time went from \cf2 231\cf0  to \cf4 29\cf0  seconds. (Later: \cf2 32\cf0  -> \cf4 17\cf0 .)\par
A routine for calculating TNF used string copies and a hash lookup.  A redundant (for smooth transition) arithmetic replacement was devised.  Before: \cf2 4 minutes\cf0 . After: \cf2 4 minutes \cf4 10 seconds\cf0 .\par
Another routine for calculating Pearson's correlation also had a similar redundancy, but with less expensive operations.  Lack of time and numerical analysis concerns prevented a real-time comparison.\par

\pard\sa200\sl276\slmult1\qc\fs28\lang1033 github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par
\fs56\lang9 Takeaway\fs40\par
\par

\pard\sa200\sl276\slmult1 Ignorance can sharpen your focus and help find quick solutions.\par
If you don't have the time, good enough is better than good.\par
Don't rush to refactor. (Can do the new correlation later.)\par
Use ignorance to help find out what you must learn, or what you must workaround.\par
Ignorance can be a tool. Learn how to use it.\par
Ignoreance\super (*)\nosupersub  is no excuse for not profiling.\par

\pard\li720\sa200\sl276\slmult1\par

\pard\sa200\sl276\slmult1\qc\fs28\lang1033\par
github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab Copyright 2019 Sheperd Systems\fs40\par
\fs56\lang9 The Stars, Revealed\par

\pard\sa200\sl276\slmult1\fs40\par
(*) Do not confuse with Terry Maxwell's 'The Power of Ignoreance' [my spelling] ({{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=rW43cL8LpaA }}{\fldrslt{https://www.youtube.com/watch?v=rW43cL8LpaA\ul0\cf0}}}}\f0\fs40 ),  the Dunning-Kruger effect ({{\field{\*\fldinst{HYPERLINK https://www.campaignlive.com/article/power-ignorance/1431402 }}{\fldrslt{https://www.campaignlive.com/article/power-ignorance/1431402\ul0\cf0}}}}\f0\fs40 ) or Plato's contemplation on knowledge (Republic, Book V).  Search 'thoroughly conscious ignorance' instead.\par
(**) {{\field{\*\fldinst{HYPERLINK https://www.olcf.ornl.gov/for-users/training/gpu-hackathons/ }}{\fldrslt{https://www.olcf.ornl.gov/for-users/training/gpu-hackathons/\ul0\cf0}}}}\f0\fs40\par
(***) {{\field{\*\fldinst{HYPERLINK https://bitbucket.org/berkeleylab/metabat/src }}{\fldrslt{https://bitbucket.org/berkeleylab/metabat/src\ul0\cf0}}}}\f0\fs40\par
(****) Jon Bentley, Writing Efficient Programs\par
Contact: Gerhard Paseman,  sheperdsystems@gmail.com\par
Repo: github.com/sheperdsystems/powerofignorance\par

\pard\sa200\sl276\slmult1\qc\fs28\lang1033 github.com/sheperdsystems/powerofignorance \tab\tab\tab\tab\tab sheperdsystems@gmail.com\f1\fs36\lang9\par
}
 